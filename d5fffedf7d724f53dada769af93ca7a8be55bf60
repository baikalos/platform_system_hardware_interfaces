{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "627da27a_720cb8a5",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1217,
      "author": {
        "id": 1499410
      },
      "writtenOn": "2020-11-18T22:12:07Z",
      "side": 1,
      "message": "I don\u0027t think you need the mEnableAutoSuspend change. Probably what\u0027s happening is that enableAutosuspend() gets called on the service registered in L 115. Can you register this instance with a different name, and use that for these tests?",
      "range": {
        "startLine": 1214,
        "startChar": 0,
        "endLine": 1217,
        "endChar": 66
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb1b4897_22258bf2",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1217,
      "author": {
        "id": 1409782
      },
      "writtenOn": "2020-11-18T22:20:40Z",
      "side": 1,
      "message": "I\u0027m not registering this as a service. In the test setup I am creating the classes, but I am not registering this as a service with the service manager.",
      "parentUuid": "627da27a_720cb8a5",
      "range": {
        "startLine": 1214,
        "startChar": 0,
        "endLine": 1217,
        "endChar": 66
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3fdd7e1_3e8114a3",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1217,
      "author": {
        "id": 1409782
      },
      "writtenOn": "2020-11-18T22:24:43Z",
      "side": 1,
      "message": "Without this change I get the following error:\n\n[29/38] WakeupTest#GetSingleWakeupReasonStat: FAILED (5ms)\n\nSTACKTRACE:\nsystem/hardware/interfaces/suspend/1.0/default/SystemSuspendUnitTest.cpp:1217: Failure\nExpected equality of these values:\nenabled\nWhich is: false\ntrue\nfailed to start autosuspend\n[30/38] WakeupTest#GetChainedWakeupReasonStat: FAILED (3ms)\n\nSTACKTRACE:\nsystem/hardware/interfaces/suspend/1.0/default/SystemSuspendUnitTest.cpp:1217: Failure\nExpected equality of these values:\nenabled\nWhich is: false\ntrue\nfailed to start autosuspend\n[31/38] WakeupTest#GetMultipleWakeupReasonStats: FAILED (2ms)\n\nSTACKTRACE:\nsystem/hardware/interfaces/suspend/1.0/default/SystemSuspendUnitTest.cpp:1217: Failure\nExpected equality of these values:\nenabled\nWhich is: false\ntrue\nfailed to start autosuspend",
      "parentUuid": "bb1b4897_22258bf2",
      "range": {
        "startLine": 1214,
        "startChar": 0,
        "endLine": 1217,
        "endChar": 66
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0440691d_430fb9f4",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1217,
      "author": {
        "id": 1409782
      },
      "writtenOn": "2020-11-18T22:25:41Z",
      "side": 1,
      "message": "Is there a reason to use a static variable there instead of a class member?",
      "parentUuid": "d3fdd7e1_3e8114a3",
      "range": {
        "startLine": 1214,
        "startChar": 0,
        "endLine": 1217,
        "endChar": 66
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ff73580_e0f2e33b",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1217,
      "author": {
        "id": 1499410
      },
      "writtenOn": "2020-11-19T14:42:49Z",
      "side": 1,
      "message": "The static variable would ensure there is only one auto suspend thread. To have the same with mAutoSuspendEnabled, you need to make it thread safe, to avoid a race on the `if (mAutoSuspendEnabled)` check, which could potentially allow more than one auto suspend threads to be started.",
      "parentUuid": "0440691d_430fb9f4",
      "range": {
        "startLine": 1214,
        "startChar": 0,
        "endLine": 1217,
        "endChar": 66
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e0f3ae2_330a06d9",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1217,
      "author": {
        "id": 1409782
      },
      "writtenOn": "2020-11-20T00:25:04Z",
      "side": 1,
      "message": "Wouldn\u0027t the static variable be similarly susceptible to race condition in this way? I can change this to std::atomic_bool or std::atomic_flag instead to prevent the race condition.\n\nAlso why do we want to ensure only one auto suspend thread? That makes unit testing substantially more difficult. If the concern is having multiple threads accessing /sys/power/state and we want to ensure only one instance of this wouldn\u0027t it be better to make the entire class or set of classes a singleton?",
      "parentUuid": "5ff73580_e0f2e33b",
      "range": {
        "startLine": 1214,
        "startChar": 0,
        "endLine": 1217,
        "endChar": 66
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba53320d_9fbff628",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1217,
      "author": {
        "id": 1499410
      },
      "writtenOn": "2020-11-20T01:52:44Z",
      "side": 1,
      "message": "Yes you are right, I was wrongly under the impression that local statics are thread safe. Seems this is only true for their initialization when compiled in gcc w/o fno-threadsafe-statics flag.\n\nHaving more than one auto suspend thread would mess up the whole backoff heuristic.\n\nWe wouldn\u0027t need to make singleton because it\u0027s not so much that we want to ensure only one instance of the systemsuspend class, rather that we only start one autosuspend thread.\n\nRather than the atomics which would still allow the admittedly already existing race between the check and the update of mAutosupendEnabled (when multiple threads simultaneously check mAutosuspendEnabled and it\u0027s false), I think we should just make the enableAutosuspend() function thread safe with something like a scoped lock.",
      "parentUuid": "2e0f3ae2_330a06d9",
      "range": {
        "startLine": 1214,
        "startChar": 0,
        "endLine": 1217,
        "endChar": 66
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "369d3fa3_e8849069",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1217,
      "author": {
        "id": 1409782
      },
      "writtenOn": "2020-11-20T03:27:47Z",
      "side": 1,
      "message": "I guess I\u0027m just not understanding why we can only start one autosuspend thread, but create many instances of the SystemSuspend class.\n\nNothing in the documentation of that class suggests that only one instance of the autosuspend thread is permitted per program instance.\n\nThe current design (static autosuspend flag) allows for multiple SystemSuspend threads operating on entirely separate file descriptors, but only one of the SystemSuspend objects is allowed to initialize its autosuspend thread.\n\nIt seems to me that either\n1. There should only be one SystemSuspend class (singleton) allowed per program\n2. There should be no restrictions on SystemSuspend. All data used by a given SystemSuspend object is local to that class.",
      "parentUuid": "ba53320d_9fbff628",
      "range": {
        "startLine": 1214,
        "startChar": 0,
        "endLine": 1217,
        "endChar": 66
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb612622_92dfce8a",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1217,
      "author": {
        "id": 1409782
      },
      "writtenOn": "2020-11-20T03:31:55Z",
      "side": 1,
      "message": "Note that this restriction also makes this class more difficult to test via unit tests",
      "parentUuid": "369d3fa3_e8849069",
      "range": {
        "startLine": 1214,
        "startChar": 0,
        "endLine": 1217,
        "endChar": 66
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e2a2d51_fbaabaf0",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1217,
      "author": {
        "id": 1409782
      },
      "writtenOn": "2020-11-20T16:25:13Z",
      "side": 1,
      "message": "I will follow up with @trong to get his opinion about how to resolve this.",
      "parentUuid": "fb612622_92dfce8a",
      "range": {
        "startLine": 1214,
        "startChar": 0,
        "endLine": 1217,
        "endChar": 66
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67a158d5_97bf0bf6",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1217,
      "author": {
        "id": 1124693
      },
      "writtenOn": "2020-11-20T17:44:11Z",
      "side": 1,
      "message": "I think it\u0027s OK for each SystemSuspend class to have its own suspend thread as long as none of them try to suspend. This class was deliberately made in a way that allows creating multiple instances of it for testing. That is why dependencies on /sys/power/* are injected into it.\n\n\u003e Having more than one auto suspend thread would mess up the whole backoff heuristic.\n\nI don\u0027t have enough context on this. But if different instance of SystemSuspend can affect each other, I think we should fix that for testibility.",
      "parentUuid": "4e2a2d51_fbaabaf0",
      "range": {
        "startLine": 1214,
        "startChar": 0,
        "endLine": 1217,
        "endChar": 66
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99d50dbb_65511a6d",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1217,
      "author": {
        "id": 1499410
      },
      "writtenOn": "2020-11-20T19:18:33Z",
      "side": 1,
      "message": "Multiple instances of suspend don\u0027t affect each other, only the case where multiple auto suspend threads could get started from the same suspend instance can cause issues with sleepTime and backoff. I don\u0027t think there is an trigger event for this currently but the race still exists.\n\nWith regards to testing Ben, adding the lock wouldn\u0027t require any changes to the tests you currently have. I don\u0027t think atomic will solve the race mentioned above, since multiple threads could still read mAutosuspendEnabled as false before it gets updated, and spin up multiple auto suspend threads on the same suspend instance.",
      "parentUuid": "67a158d5_97bf0bf6",
      "range": {
        "startLine": 1214,
        "startChar": 0,
        "endLine": 1217,
        "endChar": 66
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c22f97af_496a57e7",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1217,
      "author": {
        "id": 1409782
      },
      "writtenOn": "2020-11-20T20:54:25Z",
      "side": 1,
      "message": "I updated mAutosuspendEnabled to be std::atomic_flag with SystemSuspend::enableAutosuspend() checking \n\nif (mAutosuspendEnabled.test_and_set()) return;\n// enable autosuspend thread\n\nUnless I\u0027m missing something this should ensure that the race described above cannot happen.",
      "parentUuid": "99d50dbb_65511a6d",
      "range": {
        "startLine": 1214,
        "startChar": 0,
        "endLine": 1217,
        "endChar": 66
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83424ddc_3071bc3b",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1217,
      "author": {
        "id": 1499410
      },
      "writtenOn": "2020-11-20T21:39:22Z",
      "side": 1,
      "message": "I see, LGTM",
      "parentUuid": "c22f97af_496a57e7",
      "range": {
        "startLine": 1214,
        "startChar": 0,
        "endLine": 1217,
        "endChar": 66
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9200c95_3716f3e7",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1217,
      "author": {
        "id": 1409782
      },
      "writtenOn": "2020-11-23T21:12:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "83424ddc_3071bc3b",
      "range": {
        "startLine": 1214,
        "startChar": 0,
        "endLine": 1217,
        "endChar": 66
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2ff7f30_3373d4b0",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1233,
      "author": {
        "id": 1499410
      },
      "writtenOn": "2020-11-18T22:12:07Z",
      "side": 1,
      "message": "You can use `repo upload --no-verify .`for this. This looks like bug, since L 1220 is formatted on single line.\n\nTo reduce the race window in the tests, in auto suspend you can move updateSleepTime() to right after the readSleepTime(), to mitigate the additional latency from updating wakeup stats.",
      "range": {
        "startLine": 1232,
        "startChar": 0,
        "endLine": 1233,
        "endChar": 9
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b19cd0c_933c2a6c",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1233,
      "author": {
        "id": 1409782
      },
      "writtenOn": "2020-11-18T22:20:40Z",
      "side": 1,
      "message": "SGTM. updated.",
      "parentUuid": "a2ff7f30_3373d4b0",
      "range": {
        "startLine": 1232,
        "startChar": 0,
        "endLine": 1233,
        "endChar": 9
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a0038d1_5f242dc0",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1291,
      "author": {
        "id": 1499410
      },
      "writtenOn": "2020-11-18T22:12:07Z",
      "side": 1,
      "message": "You should be able to delete this, I believe.",
      "range": {
        "startLine": 1291,
        "startChar": 0,
        "endLine": 1291,
        "endChar": 49
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83f10097_3fa12623",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1291,
      "author": {
        "id": 1409782
      },
      "writtenOn": "2020-11-18T22:20:40Z",
      "side": 1,
      "message": "confirmed, was able to delete. Thank you!",
      "parentUuid": "1a0038d1_5f242dc0",
      "range": {
        "startLine": 1291,
        "startChar": 0,
        "endLine": 1291,
        "endChar": 49
      },
      "revId": "d5fffedf7d724f53dada769af93ca7a8be55bf60",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}