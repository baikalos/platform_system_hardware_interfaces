{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e0b90cb4_3dd36606",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1290,
      "author": {
        "id": 1241955
      },
      "writtenOn": "2020-12-17T01:25:54Z",
      "side": 1,
      "message": "It might be worth defining some constants for a few of these numbers getting used repeatedly, e.g.:\nLONG_SUSPEND_MILLIS 10000\nSHORT_SUSPEND_MILLIS 10\nOVERHEAD_MILLIS 20\nSINGLE_SUSPEND_COUNT 1\nMULTIPLE_SUSPEND_COUNT 2\n\nThen lines like 1334 will become more clear (e.g. that 20 isn\u0027t because of the 20ms of overhead, but rather because it is SHORT_SUSPEND_MILLIS * MULTIPLE_SUSPEND_COUNT)",
      "range": {
        "startLine": 1290,
        "startChar": 15,
        "endLine": 1290,
        "endChar": 22
      },
      "revId": "9c06eea3904e0811e5e8afeeaa7183602a1f642e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ea1cedf_8cc15803",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1290,
      "author": {
        "id": 1409782
      },
      "writtenOn": "2020-12-17T17:50:06Z",
      "side": 1,
      "message": "Good idea. I can do that.",
      "parentUuid": "e0b90cb4_3dd36606",
      "range": {
        "startLine": 1290,
        "startChar": 15,
        "endLine": 1290,
        "endChar": 22
      },
      "revId": "9c06eea3904e0811e5e8afeeaa7183602a1f642e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2eca017_6196456d",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1323,
      "author": {
        "id": 1241955
      },
      "writtenOn": "2020-12-17T01:25:54Z",
      "side": 1,
      "message": "I have a migraine, and I may just be thinking about these incorrectly; apologies in advance for whatever I\u0027m missing.  But I\u0027m not following why this line and lines 1337 and 1346-47 are the right numerical targets for sleepTimeMillis.\n\nOn this instance and line 1337, wouldn\u0027t we expect to sleep for:\n* baseSleepTime the first time, since we\u0027re starting with a clean slate\n* baseSleepTime * sleepTimeScaleFactor the second time, since we should have backed off after the first time\n... making the total baseSleepTime * (1 + sleepTimeScaleFactor)?\n\nAnd on line 1346, wouldn\u0027t we expect sleep time to grow by:\n* baseSleepTime * sleepTimeScaleFactor^2\nrelative to the previous sleepTimeMillis?  In the first sleep (line 1329) we would\u0027ve slept for baseSleepTime, and in the second sleep (also line 1329) we would\u0027ve slept for the first \"backed off\" duration of baseSleepTime * sleepTimeScaleFactor, so the third sleep (line 1340) would then be for the second backed-off duration, which would be baseSleepTime * sleepTimeScaleFactor * sleepTimeScaleFactor",
      "range": {
        "startLine": 1323,
        "startChar": 1,
        "endLine": 1323,
        "endChar": 74
      },
      "revId": "9c06eea3904e0811e5e8afeeaa7183602a1f642e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "295f3b45_8cb1b3a4",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1323,
      "author": {
        "id": 1409782
      },
      "writtenOn": "2020-12-17T02:49:46Z",
      "side": 1,
      "message": "I\u0027ve chosen to update the amount of time slept in SystemSuspend::updateSleepTime() with the amount of time previously slept. So\n\nif we never attempt suspend, sleepTimeMillis \u003d\u003d 0\nif we suspend once, sleepTimeMillis \u003d\u003d baseSleepTime\n\netc.\n\nI chose to do it that way to make it so that we update sleep stats in one place vs updating before kernel suspend, and then again after kernel suspend.\n\nThe results would be mostly the same, but it would produce slightly different results when it came to unit testing.",
      "parentUuid": "f2eca017_6196456d",
      "range": {
        "startLine": 1323,
        "startChar": 1,
        "endLine": 1323,
        "endChar": 74
      },
      "revId": "9c06eea3904e0811e5e8afeeaa7183602a1f642e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd06e5d5_03755189",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1323,
      "author": {
        "id": 1241955
      },
      "writtenOn": "2020-12-17T07:56:46Z",
      "side": 1,
      "message": "Right, I follow that part.  In general operation, I think(?) the sequence of events looks like:\n\nA) do sleep(active sleep time)\nB) wait for no kernel wake activity or userspace wakelocks\nC) do suspend N\nD) update active sleep time and stats\nE) do sleep(active sleep time)\nF) wait for no kernel wake activity or userspace wakelocks\nG) do suspend N+1\nH) update active sleep time and stats\nI) do sleep(active sleep time)\n...\n\nSo _if_ I understand correctly, the code in line 1315 would span the following steps from that sequence:\n\nTest starts at step C (I think?)\nC) do suspend 1\n    result: success, 10ms in suspend, 20ms of overhead -\u003e bad(short) suspend\nD) update active sleep time and stats.\n    sleepTimeMillis +\u003d active sleep time (i.e. base sleep time)\n    active sleep time *\u003d scaling factor\nE) do sleep(active sleep time)\nF) wait for no kernel wake activity or userspace wakelocks\nG) do suspend 2\n    result: success, 10ms in suspend, 20ms of overhead -\u003e bad(short) suspend\nH) update active sleep time and stats.\n    sleepTimeMillis +\u003d active sleep time (i.e. base sleep time * scaling factor)\n    active sleep time *\u003d scaling factor\n\nTest obtains stats.\n\nSo sleepTimeMillis has now been updated twice:\n    in step D, it was increased (from 0) by (base sleep time)\n    in step H, it was increased by (base sleep time * scaling factor)\n\nAnd there would be 1 new backoff (step D) and 1 backoff continuation (step H), and the active sleep time would now be (base sleep time * scaling factor * scaling factor)\n\nIs that an accurate reflection of what the sequence looks like in production and how it happens under test on line 1315?",
      "parentUuid": "295f3b45_8cb1b3a4",
      "range": {
        "startLine": 1323,
        "startChar": 1,
        "endLine": 1323,
        "endChar": 74
      },
      "revId": "9c06eea3904e0811e5e8afeeaa7183602a1f642e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21821fe9_4eac7001",
        "filename": "suspend/1.0/default/SystemSuspendUnitTest.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1323,
      "author": {
        "id": 1409782
      },
      "writtenOn": "2020-12-17T17:24:09Z",
      "side": 1,
      "message": "Ah I think I might know the difference in our reasoning here:\nThe suspend backoff threshold is defined as\n# Number of consecutive bad (short, failed) suspends above which time between attempts is scaled\n\nSo if the threshold \u003d 1, then we will start backing off when numConsecutiveBadSuspends \u003d 2.\nThe default value for this is 0 to remain consistent with the old algorithm.\n\nSo the situation you described is more like the following:\nC) do suspend 1\nresult: success, 10ms in suspend, 20ms of overhead -\u003e bad(short) suspend\nD) update active sleep time and stats.\nsleepTimeMillis +\u003d active sleep time (i.e. base sleep time)\nnumConsecutiveBadSuspends \u003d 1\nactive sleep time \u003d base sleep time (numConsecutiveBadSuspends is not strictly \u003e the threshold of 1)\nE-F)\nG) do suspend 2\nresult: success, 10ms in suspend, 20ms of overhead -\u003e bad(short) suspend\nH) update active sleep time and stats.\n    sleepTimeMillis +\u003d active sleep time (i.e. base sleep time)\n    numConsecutiveBadSuspend \u003d 2\n    active sleep time *\u003d scaling factor",
      "parentUuid": "bd06e5d5_03755189",
      "range": {
        "startLine": 1323,
        "startChar": 1,
        "endLine": 1323,
        "endChar": 74
      },
      "revId": "9c06eea3904e0811e5e8afeeaa7183602a1f642e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}