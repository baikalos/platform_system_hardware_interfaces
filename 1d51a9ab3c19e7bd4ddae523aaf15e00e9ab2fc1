{
  "comments": [
    {
      "key": {
        "uuid": "ddef2b8e_5a8c196c",
        "filename": "net/netd/1.0/INetdHwService.hal",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-07-13T16:40:21Z",
      "side": 1,
      "message": "Do you want to document that this is the net_handle_t value used in by the android_setsocknetwork, etc. functions?",
      "range": {
        "startLine": 31,
        "startChar": 43,
        "endLine": 31,
        "endChar": 52
      },
      "revId": "1d51a9ab3c19e7bd4ddae523aaf15e00e9ab2fc1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bd57457_d61231ac",
        "filename": "net/netd/1.0/INetdHwService.hal",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1062130
      },
      "writtenOn": "2017-07-13T16:49:22Z",
      "side": 1,
      "message": "FWIU this is the actual net id which is in internal implementation to the platform. net_handle_t is a masked value published in S[/N]DK. Clients cant use net_id as is with android_setsocknetwork, it needs to go through 0xfacade magic. Please correct me if i am wrong.",
      "parentUuid": "ddef2b8e_5a8c196c",
      "range": {
        "startLine": 31,
        "startChar": 43,
        "endLine": 31,
        "endChar": 52
      },
      "revId": "1d51a9ab3c19e7bd4ddae523aaf15e00e9ab2fc1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b84a0217_e405a92f",
        "filename": "net/netd/1.0/INetdHwService.hal",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2017-07-13T16:40:21Z",
      "side": 1,
      "message": "Do you want a better error code than a boolean? Internally netd uses linux errno codes, and I think we could expose t hat.",
      "range": {
        "startLine": 39,
        "startChar": 53,
        "endLine": 39,
        "endChar": 65
      },
      "revId": "1d51a9ab3c19e7bd4ddae523aaf15e00e9ab2fc1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e614d31_542614a0",
        "filename": "net/netd/1.0/INetdHwService.hal",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1062130
      },
      "writtenOn": "2017-07-13T16:49:22Z",
      "side": 1,
      "message": "smoreland\u0027s earlier comment suggested to not use Linux error codes (errnos) in HIDL. I tend to agree as this API can potentially be accessed by a JAVA client as well.\n\nUsing a boolean to indicate failure. Type of failure seems inconsequential because there isn\u0027t anything the client can do really after this point. However I do agree that for future use cases an enum may behoove for us to be consistent with error codes returned. I can add an Error type (enum) for return. WDYT?",
      "parentUuid": "b84a0217_e405a92f",
      "range": {
        "startLine": 39,
        "startChar": 53,
        "endLine": 39,
        "endChar": 65
      },
      "revId": "1d51a9ab3c19e7bd4ddae523aaf15e00e9ab2fc1",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}