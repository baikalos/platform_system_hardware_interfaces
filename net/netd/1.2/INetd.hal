/*
 * Copyright 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.system.net.netd@1.2;

import @1.0::INetd;
import @1.1::INetd;

/**
 * This is the root of the HAL module and is the interface returned when
 * loading an implementation of the INetd HAL.
 */
interface INetd extends @1.1::INetd {
    /**
     * Add a idletimer to an interface
     * Both ifname and timeout value should be specified.
     *
     * @param ifname        Interface name on which the idletimer needs to be
     *                      started.
     * @param timeout       Idletimer timeout value in secs.
     * @param labelName     String label to identify the idletimer.
     * @param isAlarm       Whether the Idletimer added should be a alarm timer
     *                      which runs even when apps processor is suspended
     *                      or in power_save mode.
     */
    @callflow(next={"*"})
    addIdletimerInteface(string ifname, uint32_t timeout,
                         string classLabel, bool isAlarm)
              generates (StatusCode status);

     /**
     * Remove the idletimer for an interface
     * Both ifname and timeout value should be specified.
     *
     * @param ifname        Interface name for which the idletimer needs to be
     *                      removed.
     * @param timeout       Idletimer timeout value in secs.
     * @param labelName     String label to identify the idletimer.
     * @param isAlarm       Whether the Idletimer is an alarm timer
     *                      which runs even when apps processor is suspended
     *                      or in power_save mode.
     */
    @callflow(next={"*"})
    removeIdletimerInteface(string ifname, uint32_t timeout,
                            string classLabel, bool isAlarm)
              generates (StatusCode status);

};

