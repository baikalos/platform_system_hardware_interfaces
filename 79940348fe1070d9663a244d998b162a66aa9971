{
  "comments": [
    {
      "key": {
        "uuid": "3d395798_799aa041",
        "filename": "net/netd/1.1/INetd.hal",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-02-06T08:30:08Z",
      "side": 1,
      "message": "Adding a prefix length does not make sense here. The nexthop must either be empty or an IP address. So this could be \"For example, 10.0.0.1 or 2001:db8:1::cafe\".\n\nAlso say somewhere that at least one of nexthop and ifname must be non-empty.",
      "range": {
        "startLine": 37,
        "startChar": 37,
        "endLine": 37,
        "endChar": 69
      },
      "revId": "79940348fe1070d9663a244d998b162a66aa9971",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2f33d67_71572f31",
        "filename": "net/netd/1.1/INetd.hal",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-02-02T18:44:07Z",
      "side": 1,
      "message": "IPv4/6 range of the target host? is a specific address also supported?",
      "range": {
        "startLine": 52,
        "startChar": 31,
        "endLine": 52,
        "endChar": 38
      },
      "revId": "79940348fe1070d9663a244d998b162a66aa9971",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22e0e23e_d1bc0aeb",
        "filename": "net/netd/1.1/INetd.hal",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1062130
      },
      "writtenOn": "2018-02-02T19:03:02Z",
      "side": 1,
      "message": "Yes, specific is also supported. Range is described by the prefix length or the subnet \"/\"",
      "parentUuid": "b2f33d67_71572f31",
      "range": {
        "startLine": 52,
        "startChar": 31,
        "endLine": 52,
        "endChar": 38
      },
      "revId": "79940348fe1070d9663a244d998b162a66aa9971",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5f05b8f_7160ac84",
        "filename": "net/netd/1.1/INetd.hal",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-02-06T08:30:08Z",
      "side": 1,
      "message": "Same comments as above.",
      "range": {
        "startLine": 57,
        "startChar": 28,
        "endLine": 57,
        "endChar": 69
      },
      "revId": "79940348fe1070d9663a244d998b162a66aa9971",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e363a0d_e56b4daa",
        "filename": "net/netd/1.1/INetd.hal",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-02-02T18:44:07Z",
      "side": 1,
      "message": "to be used in what way?",
      "revId": "79940348fe1070d9663a244d998b162a66aa9971",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dde9f3d_65ac6bbd",
        "filename": "net/netd/1.1/INetd.hal",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1062130
      },
      "writtenOn": "2018-02-02T19:03:02Z",
      "side": 1,
      "message": "basically a refcount of requestors. System also enables this for it\u0027s own features. As long as their is at least one requestor, this stays enabled, or else it gets disabled. Currently via netutils-wrapper, a feature tag is used, e.g. \"iWLAN\".",
      "parentUuid": "7e363a0d_e56b4daa",
      "revId": "79940348fe1070d9663a244d998b162a66aa9971",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb55c441_c3618a97",
        "filename": "net/netd/1.1/INetd.hal",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1120458
      },
      "writtenOn": "2018-02-02T19:09:24Z",
      "side": 1,
      "message": "That needs to be specified here. How about instead of using something like this, you use an interface.\n\nsetIpForwardEnable(IForwardClient client, bool enable). This allows you to attribute ip forward enables in a way that can\u0027t be faked to the kernel without processes passing these tokens around. IForwardClient would be an empty interface that just serves to satisfy this refcount.\n\nHowever, that raises another question, why is this a global setting? Shouldn\u0027t it be specific to each client?",
      "parentUuid": "9dde9f3d_65ac6bbd",
      "revId": "79940348fe1070d9663a244d998b162a66aa9971",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f6c3ff7_00fe7879",
        "filename": "net/netd/1.1/INetd.hal",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1062130
      },
      "writtenOn": "2018-02-02T19:17:02Z",
      "side": 1,
      "message": "Ack.\n\n\u003eHowever, that raises another question, why is this a global setting? Shouldn\u0027t it be specific to each client?\n\nthis is a system wide setting, enabled only when there is any feature that needs IP forwarding.",
      "parentUuid": "eb55c441_c3618a97",
      "revId": "79940348fe1070d9663a244d998b162a66aa9971",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05f6788a_ab5faba2",
        "filename": "net/netd/1.1/INetd.hal",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1062130
      },
      "writtenOn": "2018-02-05T17:56:15Z",
      "side": 1,
      "message": "\u003e Ack.\n\u003e \n\u003e \u003eHowever, that raises another question, why is this a global setting? Shouldn\u0027t it be specific to each client?\n\u003e \n\u003e this is a system wide setting, enabled only when there is any feature that needs IP forwarding.\n\n\u003esetIpForwardEnable(IForwardClient client, bool enable). This allows you to attribute ip forward enables in a way that can\u0027t be faked to the kernel without processes passing these tokens around. IForwardClient would be an empty interface that just serves to satisfy this refcount\n\nRevoking the vote upon client disconnect or simply to handle multiple clients may need something like this:\n\nINetd::getIpForwardEnableToken() generates (IForwardClient client, StatusCode status)\n\nclient::setIpForwardEnable(bool enable);\n\nWe can then track unique binderized instance of IForwardClient in the server, and subscribe for death notifications. WDYT?",
      "parentUuid": "3f6c3ff7_00fe7879",
      "revId": "79940348fe1070d9663a244d998b162a66aa9971",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11c53d1a_28a158cd",
        "filename": "net/netd/1.1/INetd.hal",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2018-02-06T08:30:08Z",
      "side": 1,
      "message": "I\u0027m not sure it\u0027s a good idea to have death notifications here, for consistency reasons. All the methods in this interface (including the ones that we already released in INetd 1.0) produce effects that persist for as long as netd is running, and the caller(s) are responsible for ensuring they don\u0027t misconfigure the networks they create.\n\n(This is similar, if you will, to the way that the routes added by \"ip route add\" do not go away once the ip binary tetrminates.)\n\nNot sure about the token. Realistically, this HAL is for highly privileged vendor code that knows what it\u0027s doing, and the implementation does not make any attempt to protect said code from itself (but does prevent said code from interfering with the framework and vice versa).\n\nI can see your point that if the vendor code does not disable forwarding with the same token it passed in the first time it will get an error, but I\u0027m not sure we need to do anything to save buggy callers from themselves.\n\nPerhaps easiest is not to have a requester parameter at all. Internally, netd can treat all callers of this HAL as being the same entity - the vendor code - and will keep separate from it all the other callers (which are in the OS itself).",
      "parentUuid": "05f6788a_ab5faba2",
      "revId": "79940348fe1070d9663a244d998b162a66aa9971",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}